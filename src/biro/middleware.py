from abc import ABC, abstractclassmethod


class Scope:
    GLOBAL = 0
    LOCAL = 1


class Error:
    header = "biro listen, you have an error :(\n"

    def _show_header(self):
        print(self.header, end="")

    def _type_SYNTAX(self):
        print("Syntax Error:")

    def show(self, msg):
        self._show_header()
        print(msg)

    def parsing(self, p):
        self._show_header()
        self._type_SYNTAX()
        print(f"\tline: {p.lineno}\n\tat `{p.value}`")


class BiroIntermediateCode:
    _global_vars = {}
    _func_defs = {}
    _code = ""
    _header = """
    This code is automatically generated by the biro compiler (link). 
    Do not edit this manually, use the biro instead to make changes.

    Credits (in the order of contribution):
        - Meetesh Saini (https://github.com/Meetesh-Saini)
    """

    def setGlobal(self, name, typ):
        if name in self._global_vars:
            Error().show(f"Global variable `{name}` defined again")
            exit(1)
        self._global_vars[name] = typ

    def setGlobal(self, name, typ, line=None, col=None):
        if name in self._global_vars:
            line_col = f"\n\tline: {line}"
            if line is None or col is None:
                line_col = ""
            Error().show(f"Global variable `{name}` defined again{line_col}")
            exit(1)
        self._global_vars[name] = typ

    def getGlobals(self):
        return self._global_vars

    def setFunc(self, name, arg_names, arg_type, return_type, block) -> None:
        k = (name, tuple(arg_type))
        if k in self._func_defs:
            Error.show(
                f"Function {name} is defined again with same argument types {arg_type}"
            )
            exit(1)
        self._func_defs[k] = (arg_names, return_type, block)

    def getFunc(self):
        return self._func_defs

    def setCode(self, code):
        self._code = code

    def getCode(self):
        return self._code


class BiroBuiltins(ABC):
    @abstractclassmethod
    def _builtin_say(self):
        pass

    @abstractclassmethod
    def _builtin_ask(self):
        pass

    @abstractclassmethod
    def _builtin_index(self):
        pass

    @abstractclassmethod
    def _builtin_len(self):
        pass
